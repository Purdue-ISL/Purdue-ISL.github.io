import{_ as g}from"./HeaderNav.5969ea2c.js";import{_ as h}from"./PageHeader.10bb101c.js";import{_ as m}from"./SubPageNav.e713b4d5.js";import{_ as u,a as v}from"./separator.4d6802e7.js";import{_ as f,c as b,a as t,b as n,f as l,o as _}from"./entry.eda3b698.js";import"./nuxt-link.983293d7.js";import"./_commonjsHelpers.725317a4.js";let o=[];const w={beforeRouteEnter(a,e,s){console.log(e),console.log(a),a.params.link=e,s()},methods:{overlap(a,e){return(window.screen.height-a.getBoundingClientRect().top)/window.screen.height>e},handleScroll(){var a=[];for(var e in o)this.overlap(o[e],.1)&&(o[e].classList.toggle("show-up"),a.push(e));for(var e in a)delete o[a[e]];Object.keys(o).length==0&&(console.log("removed"),window.removeEventListener("scroll",this.handleScroll))}},mounted(){window.scrollTo(0,0),o=[],document.querySelectorAll(".subpages-section-container-div").forEach(e=>{o.push(e),e.classList.contains("show-up")&&e.classList.toggle("show-up")}),window.addEventListener("scroll",this.handleScroll),this.handleScroll()}},y={id:"doc",class:"bg-[var(--primary-color)] bg-img min-h-screen"},k={class:"limit-width"},P={class:"limit-width"},x=t("div",{class:"w-[96%] mx-auto"},null,-1),S=t("h1",{class:"subpages-title"}," Flexible Data Plane Programming ",-1),O=l('<div id="des" class="subpages-section-container-div"><div class="subpages-section-title-container-div"><h1 class="subpages-section-title">Description</h1></div><div class="subpages-section-content"><p> Data plane programming has been widely adopted by both academia and industry. As a prominent instance, the P4 programming language has been a key language enabling flexible data plane programming with the support of compilers, formal semantics, verification frameworks, testing systems, as well as commodity hardware such as Intel Tofino and Cisco Silicon One. Despite these promising development, there is still a long way to go to let average network architects program data planes in a natural and efficient way. One unique challenge for data plane programming stems from the inherent tension between abstraction and customized optimization. <br> <br> On one hand, today’s data plane programming is too low level — P4 and other languages used by practitioners are hardware-specific and lack many common features most other programmers enjoy everyday (e.g., encapsulation, modularity, libraries); network programmers have to be aware of hardware resources and limitations, tune a lot of details (e.g., determining states, table sizes or memory configurations) of the code to satisfy different hardware constraints, update the code frequently when the network changes, and receive little help for debugging. <br> <br> On the other hand, today’s data plane programming is also too high level — it relies on compilers to perform standard, per-switch optimizations, and it is hardly possible for a programmer to make any networkwide optimizations (e.g., distributing workload to multiple switches) or customize the optimization target for a special scenario or application. <br> <br> Matching the two conflicting problems, we have seen two disconnected directions of research in recent years. One emerging direction is to introduce higher-level, more abstract languages with more convenient programming tools; but programmers usually have to give up their flexible, fine-granulated optimization goals. Oppositely, another direction is to develop advanced optimization techniques that expect user-provided-guidance (e.g., program segmentations, application-specific labels and policies), making them not accessible to simple network programmers. <br> <br> The goal of this project is to reconcile the two research directions by developing a radically new programming system for data plane programming, with which a user can naturally and flexibly describe her network design and optimization goals and the corresponding optimal data plane can be automatically generated. </p></div></div>',1),C={id:"pub",class:"subpages-section-container-div"},N=t("div",{class:"subpages-section-title-container-div"},[t("h1",{class:"subpages-section-title"},"Publications")],-1),j={class:"subpages-section-content"},L=l('<div id="ppl" class="subpages-section-container-div"><div class="subpages-section-title-container-div"><h1 class="subpages-section-title">Team</h1></div><div class="subpages-section-content"><div><span class="font-bold text-xl">Faculty</span><div class="text-lg pl-2"><ul class="gap-10"><li class="font-mono tracking-tighter">Prof. Sanjay Rao</li></ul></div></div><br><div><span class="font-bold text-xl">Students</span><div class="text-lg pl-2"><ul class="gap-10"><li><span class="font-mono tracking-tighter"> Chenan Wen </span><span>— Ph.D. student</span></li><li><span class="font-mono tracking-tighter"> Syed Usman Jafri </span><span> — Ph.D. student</span></li><li><span class="font-mono tracking-tighter"> Zhuocong Li </span><span> — Undergraduate student</span></li></ul></div></div><br><div><span class="font-bold text-xl">Graduated Students</span><div class="text-lg pl-2"><ul class="gap-10"><li><span class="font-mono tracking-tighter"> Chuan Jiang </span><span>— Ph.D.</span></li><li><span class="font-mono tracking-tighter"> Yanjun Wang </span><span> — Ph.D.</span></li><li><span class="font-mono tracking-tighter"> Zixuan Li </span><span> — MS</span></li></ul></div></div><br><div><span class="font-bold text-xl">Collaborators</span><div class="text-lg pl-2"><ul class="gap-10"><li><span class="font-mono tracking-tighter">Prof. Xiaokang Qiu</span><span> — Purdue University</span></li></ul></div></div><br></div></div>',1),z=t("div",{class:"pb-[30px]"},null,-1);function A(a,e,s,D,M,W){const c=g,p=h,d=m,i=u,r=v;return _(),b("div",y,[t("div",k,[n(c)]),n(p,{title:"Projects"}),t("div",P,[x,S,n(d,{data:[["Description","des"],["Publications","pub"],["People","ppl"]]}),O,t("div",C,[N,t("div",j,[t("p",null,[n(i,{title:"P4CGO: Control Plane Guided P4 Program Optimization",authors:"Chenan Wen, Zhuocong Li, Syed Usman Jafri, Xiaokang Qiu and Sanjay Rao",conference:"FMANO '24: Proceedings of the 2024 SIGCOMM Workshop on Formal Methods Aided Network Operation, August 2024",paper:"papers/P4CGO_FMANO_2O24.pdf"}),n(r),n(i,{title:"Comparative Synthesis: Learning Near-Optimal Network Designs by Query",authors:"Yanjun Wang, Chuan Jiang, Zixuan Li, Xiaokang Qiu, Sanjay Rao",conference:"Proceedings of the ACM on Programming Languages, 2023",paper:"https://dl.acm.org/doi/pdf/10.1145/3571197"}),n(r),n(i,{title:"Learning Network Design Objectives Using A Program Synthesis Approach",authors:"Yanjun Wang, Chuan Jiang, Xiaokang Qiu, Sanjay G. Rao",conference:"Proceedings of the 18th ACM Workshop on Hot Topics in Networks (HotNets), 2019",paper:"../papers/HotNets_2019_Paper.pdf"}),n(r)])])]),L]),z])}const T=f(w,[["render",A]]);export{T as default};
